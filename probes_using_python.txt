Here's a complete example of a Kubernetes Deployment that includes a /health endpoint exposed by a sample app (in Python with Flask) and configured with both liveness and readiness probes.

Step 1: App Code (app.py)

This app serves the /health endpoint on port 8080.

# app.py
from flask import Flask

app = Flask(__name__)

@app.route('/health')
def health():
    return "OK", 200

@app.route('/')
def root():
    return "Hello from Flask!", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)

üì¶ Step 2: Dockerfile
This builds your Python app into a container image.

FROM python:3.11-slim

WORKDIR /app

COPY app.py .

RUN pip install flask

EXPOSE 8080
CMD ["python", "app.py"]

Build and tag the image:

docker build -t healthcheck-app .

####Push it to a container registry if you're using Kubernetes in the cloud:

docker tag healthcheck-app your-registry/healthcheck-app
docker push your-registry/healthcheck-app

üöÄ Step 3: Kubernetes Deployment (deployment.yaml)

This runs the app with health checks:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcheck-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: healthcheck-app
  template:
    metadata:
      labels:
        app: healthcheck-app
    spec:
      containers:
      - name: flask-container
        image: your-registry/healthcheck-app
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 5

üåê Step 4: Kubernetes Service (service.yaml)
This exposes your app internally or externally.

apiVersion: v1
kind: Service
metadata:
  name: healthcheck-service
spec:
  selector:
    app: healthcheck-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP  # Use NodePort or LoadBalancer for external access

#############################
üß≥ Step-by-Step: Load Local Image into Kubernetes (with containerd) without loading to docker registry

1Ô∏è‚É£ Save your Docker image as a .tar archive

docker save healthcheck-app:latest -o healthcheck-app.tar

2Ô∏è‚É£ Transfer the image to your Kubernetes node
If your cluster is remote, use scp or similar:

scp healthcheck-app.tar user@your-node:/tmp/

3Ô∏è‚É£ Import the image into containerd
SSH into your node and run:

sudo ctr -n=k8s.io images import /tmp/healthcheck-app.tar

‚úÖ This makes the image visible to Kubernetes via containerd. You can verify with:
sudo crictl images

üì¶ Update Your Deployment YAML
Make sure your deployment uses:

image: healthcheck-app:latest
imagePullPolicy: Never

kubectl apply -f deployment.yaml

üß† Why This Works
Kubernetes doesn‚Äôt use Docker directly anymore‚Äîit talks to container runtimes like containerd via the CRI (Container Runtime Interface). So even if your image exists in Docker, Kubernetes won‚Äôt see it unless it‚Äôs loaded into containerd.

#############################
taking image from private registry using secrets

kubectl create secret docker-registry regcred \
  --docker-username=your-username \
  --docker-password=your-password \
  --docker-email=your-email \
  --namespace=default

Then reference it in your deployment:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcheck-deployment

spec:
  replicas: 2
  selector:
    matchLabels:
      app: healthcheck-app
  template:
    metadata:
      labels:
        app: healthcheck-app
    spec:
      containers:
      - name: flask-container
        image: iamharsham/healthcheck-app:v1
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 5
      imagePullSecrets:
      - name: regcred












